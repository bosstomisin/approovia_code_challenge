#pragma checksum "C:\Users\Dell\source\repos\SparkPlug\SparkPlugFrontend\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cdd76c50aef11ce65540ab965bc682ff8d62ab57"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Dell\source\repos\SparkPlug\SparkPlugFrontend\Views\_ViewImports.cshtml"
using SparkPlugFrontend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dell\source\repos\SparkPlug\SparkPlugFrontend\Views\_ViewImports.cshtml"
using SparkPlugFrontend.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cdd76c50aef11ce65540ab965bc682ff8d62ab57", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"33eec437389ec1f9ffc8873683c9d5f15e8c030a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("sparkPlugFeedback"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("sparkPlugFeedback"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Dell\source\repos\SparkPlug\SparkPlugFrontend\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cdd76c50aef11ce65540ab965bc682ff8d62ab574728", async() => {
                WriteLiteral(@"

    <!--
    The following Content Security Policy is defined here in the HTML header:
        1. Allow the inline script to carry out some validation. Unsafe inline is not the most secure policy however.
        2. Only allow connections to ""https://localhost:44321"". PLEASE SET A VALID ENDPOINT
        -->

    <meta http-equiv=""Content-Security-Policy""
          content=""
          script-src 'self' 'unsafe-inline';
          connect-src 'self' https://localhost:44321/api/Feedback/add-record
          "">

    <title>Spark Plug - Customer Form</title>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cdd76c50aef11ce65540ab965bc682ff8d62ab576279", async() => {
                WriteLiteral("\r\n\r\n    <h3>Customer Form</h3>\r\n\r\n    <!-- This is the Spark Plug Customer Form -->\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cdd76c50aef11ce65540ab965bc682ff8d62ab576636", async() => {
                    WriteLiteral(@"

        <label for=""customerName""><b>Name: </b></label> <input type=""text"" id=""customerName"" name=""customerName"" /> <br /><br />

        <label for=""customerEmail""><b>E-mail: </b></label> <input type=""text"" id=""customerEmail"" name=""customerEmail"" /> <br /><br />

        <label for=""customerMessage""><b>Message: </b></label> <br /> <textarea id=""customerMessage"" name=""customerMessage"" rows=""5"" cols=""50""></textarea><br />

        <br /><input type=""button"" id=""sendMessage"" name=""sendMessage"" value=""Send Feedback"" onclick=""sendFeedback()"" />

        <input type=""hidden"" id=""_formName"" name=""_formName"" />

        <input type=""hidden"" id=""_formDomainName"" name=""_formDomainName"" />

    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <div id=""feedback""><b>Status: </b><i>None yet. An actual feedback would not be italicised and it would be in quotes e.g. </i>""Yes!""</div>

    <script>

        // This delivers the form data to the endpoint URL. PLEASE SET A VALID ENDPOINT via 'endpoint' variable

        function sendFeedback() {

            chooseColor = ""red""; // feedback color

            var mySparkPlugFeedback = document.getElementById(""sparkPlugFeedback""); // the form object

            // below are the fields that collect information from the customer

            var mySPCustomerName = document.getElementById(""customerName"");

            var mySPCustomerEmail = document.getElementById(""customerEmail"");

            var mySPCustomerMessage = document.getElementById(""customerMessage"");

            var myFeedback = document.getElementById(""feedback""); // the feedback display element

            var mySPFormDomainName = document.getElementById(""_formDomainName""); // A hidden field to carry the form do");
                WriteLiteral(@"main name

            var localDomainName = window.location.hostname; // the current domain name of the form


            if (!localDomainName) {

                mySPFormDomainName.setAttribute(""value"", ""localhost""); // set the form domain name as 'localhost' by default

            } else {

                mySPFormDomainName.setAttribute(""value"", localDomainName); // set the form domain name where available
            }

            var mySPFormName = document.getElementById(""_formName""); // A hidden field to carry the form name

            mySPFormName.setAttribute(""value"", mySparkPlugFeedback.name); // assign the form name hidden field to the actual form object name

            var message = """";

            if (!mySPCustomerName.value) {

                message = ""Please provide your name!""; // validation to check for name and report where it is not provided

            }

            if (message == """" && !mySPCustomerEmail.value) {

                message = ""Please e");
                WriteLiteral(@"nter your e-mail address!""; // validation to check for e-mail address and report where it is not provided if there was no previous error

            }

            if (message == """" && !mySPCustomerMessage.value) {

                message = ""Please enter your message!""; // validation to check for message and report where it is not provided if there was no previous error

            }

            if (message == """" && (mySPCustomerMessage.value.length < 10 || mySPCustomerMessage.value.length > 500)) {

                message = ""Your message must be between 10 and 500 characters in length!""; // validation to check for message size and report where it didn't fit specifications if there was no previous error

            }


            if (message == """") { //start processing form when there are no errors

                var formdata = new FormData(mySparkPlugFeedback); // get data from the form

                var endpoint = 'https://localhost:44321/api/Feedback/add-record' //change th");
                WriteLiteral(@"is to a valid endpoint;

                fetch(endpoint, {
                    method: 'post',
                    body: formdata,
                    mode: 'cors',

                }) // send the form data to a 'cors' enabled endpoint

                    .then((resp) => resp.json())
                    .then(function (data) {

                        // get the status report through 'data' variable formatted as JSON


                        if (data.success) {

                            chooseColor = ""green""; // color when form submission was successful

                            mySparkPlugFeedback.reset(); // clear the form when the form was submitted

                        } else {

                            chooseColor = ""red""; // color when form submission was NOT successful
                        }

                        message = data.message; // the report from the endpoint regarding the form submission

                        myFeedback.innerHTML = `<b>Statu");
                WriteLiteral(@"s: </b><font color='` + chooseColor + `'>""` + message + `""</font>`; // the HTML element receives feedback from the endpoint

                    })
                    .catch(function (error) {

                        chooseColor = ""red""; // color when attempts to submit the form were NOT successful

                        message = `Form Submission Failed: ""` + error + `""`; // error message with actual report in 'error' variable

                        myFeedback.innerHTML = `<b>Status: </b><font color='` + chooseColor + `'>""` + message + `""</font>`; // the HTML element receives feedback from the endpoint

                    });

            } else {

                myFeedback.innerHTML = `<b>Status: </b><font color='` + chooseColor + `'>""` + message + `""</font>`; // the HTML element receives feedback from the endpoint

            }
        }

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
